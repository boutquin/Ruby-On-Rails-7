<!--
  This view template is designed for user sign-in functionality within the application.
  It uses embedded Ruby (ERB) to dynamically generate HTML content that facilitates
  the process of user authentication. The template presents a form where users can
  enter their credentials (email or username and password) to log into their accounts.

  The overall structure is intended to provide a user-friendly interface for signing in,
  while also offering a clear pathway for users who do not yet have an account to 
  navigate to the sign-up page.

  The primary elements of this view include:
  - A heading that clearly indicates the purpose of the page ("Sign In").
  - A prompt for users without an account, which includes a link to the sign-up page.
  - A form that captures user credentials, which, upon submission, will initiate
    the sign-in process.
-->

<h1>Sign In</h1>
<!-- The main heading (h1) clearly indicates to users that they are on the sign-in page.
     This provides immediate context for the user experience and is important for 
     accessibility. -->

<p>
  No account yet? <%= link_to "Sign up!", signup_path %>
</p>
<!-- This paragraph provides a user-friendly message encouraging users without an 
     account to sign up. It includes a link generated by the `link_to` helper, which 
     directs users to the sign-up page. The `signup_path` is a named route that 
     resolves to the appropriate URL for the user registration process. This 
     promotes user engagement by guiding them to create an account. -->

<%= form_with(url: session_path) do |form| %>
<!-- The `form_with` helper is used to create a form for signing in. The `url` 
     option specifies that the form will submit data to the `session_path`, which 
     maps to the 'create' action of the SessionsController. This action is 
     responsible for processing the sign-in request. The form is generated 
     using the `form` variable, which allows access to various form helpers. 
     This form supports both HTML and AJAX submissions, enhancing user experience. -->

  <%= form.label :email_or_username %>
  <!-- This line generates a label for the email or username input field. Labels 
       are essential for accessibility, allowing screen readers to associate 
       the label with its corresponding input field. -->

  <%= form.text_field :email_or_username, autofocus: true, required: true %>
  <!-- This line creates a text input field for users to enter their email address 
       or username. The `autofocus: true` option ensures that this field is focused 
       automatically when the page loads, providing a seamless experience for the 
       user. The `required: true` option enforces client-side validation, ensuring 
       that the field must be filled out before the form can be submitted, which 
       helps prevent empty submissions. -->

  <%= form.label :password %>
  <!-- This line generates a label for the password input field, enhancing the 
       accessibility and usability of the form. -->

  <%= form.password_field :password %>
  <!-- This line creates a password input field for users to enter their password.
       This field masks the input to protect user privacy. Unlike the text field,
       the password field does not display the entered characters, which is important 
       for security. -->

  <%= form.submit "Sign In" %>
  <!-- This line generates a submit button with the label "Sign In". When clicked, 
       this button submits the form to the specified action (in this case, the 
       create action of the SessionsController). This action will attempt to authenticate 
       the user with the provided credentials. -->

<% end %>
<!-- This marks the end of the `form_with` block. The closing tag ensures proper 
     form structure, making it a valid HTML form for user input. -->
