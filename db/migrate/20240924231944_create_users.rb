# CreateUsers is a migration class that defines the changes to be made to the database schema
# specifically for creating the 'users' table. It inherits from ActiveRecord::Migration[7.2],
# indicating that it is a migration compatible with Rails version 7.2.
class CreateUsers < ActiveRecord::Migration[7.2]
  # The change method contains the instructions for modifying the database schema.
  # This method will be automatically reversible, meaning Rails can undo this migration if necessary.
  def up
    # Create a new table named 'users'.
    # The 'id: false' option indicates that we will not use the default integer primary key provided by ActiveRecord.
    # Instead, we will manually define an 'id' column that will be populated with a UUID.
    create_table :users, id: false do |t|
      # String column to store the user ID.
      # We define this column explicitly as a string type because we will be using UUIDs,
      # which are typically represented as strings in the database.
      # The 'null: false' option enforces that every user must have an ID, preventing the insertion of records without one.
      t.string :id, null: false, primary_key: true

      # String column to store the user's name.
      # This field is used to hold the full name of the user and can be displayed in the application.
      t.string :name

      # String column to store the user's email address.
      # This field should contain a unique email for each user, which is essential for user authentication and communication.
      # Itâ€™s advisable to enforce uniqueness at the database level for data integrity.
      t.string :email

      # String column to store the password digest.
      # This field holds the hashed version of the user's password.
      # Storing passwords securely is critical for protecting user accounts; therefore, we should use a secure hashing algorithm.
      t.string :password_digest

      # Timestamps automatically generated by Rails.
      # This will create 'created_at' and 'updated_at' columns to track when each user record is created and last updated.
      # These fields provide valuable context for auditing and monitoring changes to user records.
      t.timestamps
    end

    # Add an index to the 'id' column to enhance query performance and enforce uniqueness.
    # The 'unique: true' option ensures that no two users can have the same ID,
    # which is crucial when using UUIDs to maintain the integrity of user identification in the database.
    add_index :users, :id, unique: true
  end

  def down
    # Define how to reverse the migration by dropping the users table.
    drop_table :users
  end
end
